name: GWS 8.6 Build Pipeline
on:
  workflow_call:
    inputs:
      version-tag:
        required: true
        type: string
      dev-registry:
        default: pureengage-docker-dev.jfrog.io
        type: string
  push:
    branches-ignore: [ 'master' ]

env:
  GWS_OCI_DEV_REGISTRY: gws-oci-dev.artifactory.gws.genesys.com

jobs:

  # Building GWS86 application and create an OCI container:
  build-gws86:
    name: Compile - Unit Tests - Static Code Analysis
    runs-on: [ self-hosted, gws-8.6 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Gradle build
        run: |
          pushd cloud-web
          docker run --rm --user 1000 -v $(pwd):/home/gradle/project -w /home/gradle/project \
            gradle:7-jdk17-jammy gradle --no-daemon --info --refresh-dependencies --rerun-tasks \
            -Dsonar.login=${{ secrets.GWS_SONAR_TOKEN }} -Dsonar.host.url=${{ secrets.GWS_SONAR_HOST_URL }} \
            clean build sonarqube
          popd
    name: Generate Test Reports
    steps:
      - name: XUnit Viewer
        id: xunit-viewer
        uses: AutoModality/action-xunit-viewer@v1  
      - name: Attach the report
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.xunit-viewer.outputs.report-name }}
          path: ${{ steps.xunit-viewer.outputs.report-dir }}
      - name: Save SonarQube report
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: cloud-web/build/sonar/report-task.txt
          retention-days: 5
      - name: Build OCI container
        run: |
          buildah build-using-dockerfile --format oci --build-arg _project_name=gws-api-v2 --build-arg _project_version=8.6.000.00-${GITHUB_RUN_NUMBER} \
          -t ${{ env.GWS_OCI_DEV_REGISTRY }}/gws-api-v2:8.6.000.00-${GITHUB_RUN_NUMBER}
      - name: Push to dev registry
        run: |
          skopeo copy \
            --dest-tls-verify=false \
            --dest-creds ${{ secrets.GWS_ARTIFACTORY_CREDENTIALS }} \
            containers-storage:${{ env.GWS_OCI_DEV_REGISTRY }}/gws-api-v2:8.6.000.00-${GITHUB_RUN_NUMBER} \
            docker://${{ env.GWS_OCI_DEV_REGISTRY }}/gws-api-v2:8.6.000.00-${GITHUB_RUN_NUMBER}
  
  # Checking Quality Gate status of the build at SonarQube server:
  static-code-analysis:
    needs: build-gws86
    name: Static Code Analysis
    runs-on: [ self-hosted, gws-8.6]
    container:
      image: registry.gitlab.com/gitlab-ci-utils/curl-jq:latest
      options: >-
        --user 1000
    steps:
    - name: Cleanup
      run: |
        rm -f ./cloud-web/build/sonar/report-task.txt || true
    - name: Get SonarQube report
      uses: actions/download-artifact@v3
      with:
        name: sonar-report
        path: ./cloud-web/build/sonar/report-task.txt

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        scanMetadataReportFile: ./cloud-web/build/sonar/report-task.txt/report-task.txt
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.GWS_SONAR_TOKEN }}
       SONAR_HOST_URL: ${{ secrets.GWS_SONAR_HOST_URL }} #OPTIONAL

    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  helm:
    name: Helm Chart
    runs-on: [ self-hosted, gws-8.6 ]
    steps:
      - run: |
          echo "Dummy 8.6 compile and unit test"
  

  build-containers:
    name: Containers
    needs: [ build-gws86 ]
    runs-on: [ self-hosted, gws-8.6 ]
    steps:
      - run: |
          echo "Dummy 8.6 Build Containers"

  build-rpm:
    name: RPM
    needs: [ build-containers ]
    runs-on: [ self-hosted, gws-8.6 ]
    steps:
      - run: |
          echo "Dummy 8.6 RPM Build"

  security-scans:
    name: Security
    needs: [ build-containers ]
    uses: ./.github/workflows/build-scans.yml
    with:
      version-tag: ${{ inputs.version-tag }}

  repack-dependencies:
    name: Repack Ship-With components
    uses: ./.github/workflows/repack-dependencies.yml
